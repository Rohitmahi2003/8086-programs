ROHITH R
CS B
20222087

****ADDITION****

.model small
.data
    msg1 db 13,10,"num1: $"
    msg2 db 13,10,"num2: $"
    sum db 13,10,"sum:$"
    ten dw 10
.code
.stack
start:
     mov ax,@data
     mov ds,ax
     
     lea dx,msg1
     mov ah,09h
     int 21h

     call input
     mov bh,dl
     
     lea dx,msg2
     mov ah,09h
     int 21h

     call input
     mov bl,dl

     mov ax,0000h
     mov al,bl
     mov cx,0000h
     mov cl,bh
     add ax,cx
     mov bx,ax
     
     mov ah,09h
     lea dx,sum
     int 21h

     
     call dec_output
     mov ah,4ch
     int 21h

input proc
           call inputnum
           mov cl,04h
           rol dl,cl
           and dl,00f0h
           mov ch,dl
           
           call inputnum
           and dl,000fh
           add dl,ch

           ret
input endp

inputnum proc
              mov ah,01h
              int 21h

              cmp al,'A'
              jc inputnum_is_dec
              jmp inputnum_is_hex
              inputnum_is_hex:
                sub al,'A'
                add al,0ah
                mov dl,al
                ret
              inputnum_is_dec:
                sub al,'0'
                mov dl,al
                ret
inputnum endp

dec_output proc
           mov cx,0
           output_loop:
            mov ax,bx
            mov dx,0
            div word ptr ten
            push dx
            inc cx
            mov bx,ax
            cmp bx,0
            jnz output_loop
display_digits:
               pop dx
               add dl,'0'
               mov ah,02h
               int 21h
               loop display_digits
               ret
dec_output endp
end start

OUTPUT

num1:12
num2:23
sum:53


****MULTIPLICATION****

data segment
    msg1 db 13,10,"enter first num(0-99): $"
    msg2 db 13,10,"enter second num(0-99): $"
    prod db 13,10,"product:$"
    result db '00','$'
    result1 db '00','$'
data ends
stack segment stack
    dw 128 dup(?)
stack ends

code segment
assume cs:code,ds:data,ss:stack

start:

     mov ax,data
     mov ds,ax
     
     lea dx,msg1
     mov ah,09h
     int 21h
     call gettwodigit
     mov bl,cl
     mov bh,ch
     
     lea dx,msg2
     mov ah,09h
     int 21h
     call gettwodigit
     
     mov al,cl
     mul bl
     mov ah,0
     call adjustresult
     add al,'0'
     mov result1[1],al
     mov dh,ah
     
     mov al,cl
     mul bh
     add al,dh
     mov ah,0
     call adjustresult
     mov dl,al
     mov dh,ah
     
     mov al,ch
     mul bl
     add al,dl
     mov ah,0
     call adjustresult
     add al,'0'
     mov result1[0],al
     mov dl,ah
     
     mov al,ch
     mul bh
     add al,dl
     add al,dh
     mov ah,0
     call adjustresult
     add al,'0'
     mov result[1],al
     add ah,'0'
     mov result[0],ah
     
     call displayresult
     
     mov ah,4ch
     int 21h
     
     gettwodigit:
     mov ah,01h
     int 21h
     
     
     mov ch,al
     mov ah,01h
     int 21h
     mov cl,al
     sub cl,'0'
     sub ch,'0'
     ret
     
     adjustresult:
              cmp al,9
              jbe adjreturn
              sub al,10
              inc ah
              ja adjustresult
     adjreturn:
              ret
              
     displayresult:
              lea dx,prod
              mov ah,09h
              int 21h
              
              lea dx,result
              mov ah,09h
              int 21h
              
              lea dx,result1
              mov ah,09h
              int 21h
              ret
              
    code ends
    end start
    
OUTPUT

enter first num(0-99):11
enter second num(0-99):11
product:0121


****CONCATENATION****

data segment
         str1 db 30 dup("$")
         str2 db 30 dup("$")
         msg1 db 13,10,"str1:$"
         msg2 db 13,10,"str2:$"
         res db 13,10,"concatenated string:$"
data ends

code segment
assume cs:code,ds:data
start:
      mov ax,data
      mov ds,ax
      mov cl,04
      
      lea dx,msg1
      mov ah,09h
      int 21h
      
      lea si,str1
      
      loop0:mov ah,01h
            int 21h
            cmp al,13
            je skip0
            mov [si],al
            inc si
            jmp loop0
            
      skip0:mov ah,09h
            lea dx,msg2
            int 21h
  
      lea si,str2
      loop1:mov ah,01h
            int 21h
            cmp al,13
            je skip1
            mov [si],al
            inc si
            jmp loop1
            
      skip1:call concat
      
            mov ah,4ch
            int 21h
            
      concat proc
      lea si,str1
      lea di,str2
      mov al,"$"
      
      loop2:cmp al,[si]
            jz loop3
            inc si
            jmp loop2
            
      loop3:cmp al,[di]
            jz exit
            mov bl,[di]
            mov [si],bl
            inc si
            inc di
            jmp loop3
            
      exit:mov [di],al
      lea dx,res
      mov ah,09h
      int 21h
      lea dx,str1
      mov ah,09h
      int 21h
      ret
concat endp
code ends
end start

OUTPUT

str1:time
str2:table
concatenated string:timetable


****REPLACE****

data segment
str1 db 20 dup("$")
chartoreplace db ?
replacementchar db ?

mainstr db 13,10,"str1:$"
replstr db 13,10,"char to replace:$"
newstring db 13,10,"replacement char:$"
outstring db 13,10,"modified string:$"
notstring db 13,10,"no occurence found:$"

data ends

code segment
assume cs:code,ds:data
start:
mov ax,data
mov ds,ax

lea dx,mainstr
mov ah,09h
int 21h

lea si,str1
mov cx,20

loop0:
mov ah,01h
int 21h
cmp al,13
je skip0
mov[si],al
inc si
loop loop0

skip0:
mov byte ptr[si],'$'

lea dx,replstr
mov ah,09h
int 21h

mov ah,01h
int 21h
mov [chartoreplace],al

lea dx,newstring
mov ah,09h
int 21h

mov ah,01h
int 21h
mov [replacementchar],al

call replace

mov ah,4ch
int 21h

replace proc
lea si,str1
mov al,[chartoreplace]
mov bl,[replacementchar]
xor cx,cx

replace_loop:
cmp byte ptr [si],'$'
je done
cmp byte ptr [si],al
jne next
mov [si],bl
inc cx

next:
inc si
jmp replace_loop

done:
cmp cx,0
je no_occurences

lea dx,outstring
mov ah,09h
int 21h
lea dx,str1
mov ah,09h
int 21h
ret

no_occurences:
lea dx,notstring
mov ah,09h
int 21h
ret

replace endp
code ends
end start

OUTPUT

str1:engineering
char to replace:e
replacement char:o
Modified string:onginooring
